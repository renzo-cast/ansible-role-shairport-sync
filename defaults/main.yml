---
# defaults file for ansible-role-shairport-sync


version: 4.0-dev
airplay_version: 2


### Configuration

configuration_file_path: '/etc/shairport-sync.conf'

# Please see the configuration file for defaults: https:#github.com/mikebrady/shairport-sync/blob/development/scripts/shairport-sync.conf
# empty values will imply no changes

# The default is "Hostname" -- i.e. the machine's hostname with the first letter capitalised (ASCII only.)
# You can use the following substitutions:
#  %h for the hostname,
#  %H for the Hostname (i.e. with first letter capitalised (ASCII only)),
#  %v for the version number, e.g. 3.0 and
#  %V for the full version string, e.g. 3.3-OpenSSL-Avahi-ALSA-soxr-metadata-sysconfdir:/etc
#  Overall length can not exceed 50 characters. Example: "Shairport Sync %v on %H".
general_name:
# leave this commented out if you don't want to require a password
general_password:
# aka "stuffing". Default is "auto". Alternatives are "basic" or "soxr". Choose "soxr" only if you have a reasonably fast processor and Shairport Sync has been built with "soxr" support.
general_interpolation:
# Run "shairport-sync -h" to get a list of all output_backends, e.g. "alsa", "pipe", "stdout". The default is the first one.
general_output_backend:
# Run "shairport-sync -h" to get a list of all mdns_backends. The default is the first one.
general_mdns_backend:
# Use this advanced setting to specify the interface on which Shairport Sync should provide its service. Leave it commented out to get the default, which is to select the interface(s) automatically.
general_interface:
# Listen for service requests on this port
general_port:
# start allocating UDP ports from this port number when needed
general_udp_port_base:
# look for free ports in this number of places, starting at the UDP port base. Allow at least 10, though only three are needed in a steady state.
general_udp_port_range:
# Use this advanced setting to set the service type and transport to be advertised by Zeroconf/Bonjour. Default is "_raop._tcp".
general_regtype:

# allow a timing error of this number of seconds of drift away from exact synchronisation before attempting to correct it
general_drift_tolerance_in_seconds:
# a synchronisation error greater than this number of seconds will cause resynchronisation; 0 disables it
general_resync_threshold_in_seconds:

# This can be "stereo", "mono", "reverse stereo", "both left" or "both right". Default is "stereo".
general_playback_mode:
# This can be "hammerton" or "apple". This advanced setting allows you to choose
#  the original Shairport decoder by David Hammerton or the Apple Lossless Audio Codec (ALAC) decoder written by Apple.
#  If you build Shairport Sync with the flag --with-apple-alac, the Apple ALAC decoder will be chosen by default.
general_alac_decoder:

# set this to "yes" if you want the volume to be at 100% no matter what the source's volume control is set to.
general_ignore_volume_control:
# use this advanced setting to set the range, in dB, you want between the maximum volume and the minimum volume. Range is 30 to 150 dB. Leave it commented out to use mixer's native range.
general_volume_range_db:
# use this advanced setting, which must have a decimal point in it, to set the maximum volume, in dB, you wish to use.
#  The setting is for the hardware mixer, if chosen, or the software mixer otherwise. The value must be in the mixer's range (0.0 to -96.2 for the software mixer).
#  Leave it commented out to use mixer's maximum volume.
general_volume_max_db:
# use this advanced setting to specify how the airplay volume is transferred to the mixer volume.
#  "standard" makes the volume change more quickly at lower volumes and slower at higher volumes.
#  "flat" makes the volume change at the same rate at all volumes.
general_volume_control_profile:
# when extending the volume range by combining the built-in software attenuator with the hardware mixer attenuator, set this to "yes" to reduce volume by using the hardware mixer first, then the built-in software attenuator.
# Run the specified application whenever the volume control is set or changed.
general_volume_range_combined_hardware_priority:
# The desired AirPlay volume is appended to the end of the command line â€“ leave a space if you want it treated as an extra argument.
# AirPlay volume goes from 0 to -30 and -144 means "mute".
general_run_this_when_volume_is_set:

# This is added to the latency requested by the player to delay or advance the output by a fixed amount.
#  Use it, for example, to compensate for a fixed delay in the audio back end.
#  E.g. if the output device, e.g. a soundbar, takes 100 ms to process audio, set this to -0.1 to deliver the audio
#  to the output device 100 ms early, allowing it time to process the audio and output it perfectly in sync.
general_audio_backend_latency_offset_in_seconds:
# If set too small, buffer underflow occurs on low-powered machines.
#  Too long and the response time to volume changes becomes annoying.
#  Default is 0.2 seconds in the alsa backend, 0.35 seconds in the pa backend and 1.0 seconds otherwise.
general_audio_backend_buffer_desired_length_in_seconds:
# Advanced feature. If the buffer size drops below this, stop using time-consuming interpolation like soxr to avoid dropouts due to underrun.
general_audio_backend_buffer_interpolation_threshold_in_seconds:
# This optional advanced setting, either "auto" or a positive number, sets the length of the period of silence that precedes the start of the audio.
#  The default is "auto" -- the silent lead-in starts as soon as the player starts sending packets.
#  Values greater than the latency are ignored. Values that are too low will affect initial synchronisation.
general_audio_backend_silent_lead_in_time:

# The Shairport Sync dbus interface, if selected at compilation, will appear
#  as "org.gnome.ShairportSync" on the whichever bus you specify here: "system" (default) or "session".
general_dbus_service_bus:
# The Shairport Sync mpris interface, if selected at compilation, will appear
#  as "org.gnome.ShairportSync" on the whichever bus you specify here: "system" (default) or "session".
general_mpris_service_bus:

# Use this optional advanced setting to set the wait time in seconds before deciding a packet is missing.
general_resend_control_first_check_time:
#  Use this optional advanced setting to set the time in seconds between requests for a missing packet.
general_resend_control_check_interval_time:
# Use this optional advanced setting to set the latest time, in seconds, by which the last check should be done before the estimated time of a missing packet's transfer to the output buffer.
general_resend_control_last_check_time:
# Use this optional advanced setting to set the time interval between scans for a DACP port number if no port number has been provided by the player for remote control commands
general_missing_port_dacp_scan_interval_seconds:

## sessioncontrol - Advanced parameters for controlling how Shairport Sync stays active and how it runs a session
#  "active" state starts when play begins and ends when the active_state_timeout has elapsed after play ends, unless another play session starts before the timeout has fully elapsed.
#  make sure the application has executable permission. If it's a script, include the shebang (#!/bin/...) on the first line
sessioncontrol_run_this_before_entering_active_state:
# make sure the application has executable permission. If it's a script, include the shebang (#!/bin/...) on the first line
sessioncontrol_run_this_after_exiting_active_state:
# wait for this number of seconds after play ends before leaving the active state, unless another play session begins.
sessioncontrol_active_state_timeout:

# make sure the application has executable permission. If it's a script, include the shebang (#!/bin/...) on the first line
sessioncontrol_run_this_before_play_begins:
# make sure the application has executable permission. If it's a script, include the shebang (#!/bin/...) on the first line
sessioncontrol_run_this_after_play_ends:

# if a problem occurs that can't be cleared by Shairport Sync itself, hook a program on here to deal with it. An error code-string is passed as the last argument.
#  Many of these "unfixable" problems are caused by malfunctioning output devices, and sometimes it is necessary to restart the whole device to clear the problem.
#  You could hook on a program to do this automatically, but beware -- the device may then power off and restart without warning!
sessioncontrol_run_this_if_an_unfixable_error_is_detected:
# set to "yes" to get Shairport Sync to wait until the "run_this..." applications have terminated before continuing
sessioncontrol_wait_for_completion:

# set to "yes" to allow another device to interrupt Shairport Sync while it's playing from an existing audio source
sessioncontrol_allow_session_interruption:
# wait for this number of seconds after a source disappears before terminating the session and becoming available again.
sessioncontrol_session_timeout:

# alsa Settings
# the name of the alsa output device. Use "alsamixer" or "aplay" to find out the names of devices, mixers, etc.
alsa_output_device:
# the name of the mixer to use to adjust output volume. If not specified, volume in adjusted in software.
alsa_mixer_control_name:
# the mixer_device default is whatever the output_device is. Normally you wouldn't have to use this.
alsa_mixer_device:
# can be 44100, 88200, 176400 or 352800, but the device must have the capability.
alsa_output_rate:
# can be "U8", "S8", "S16", "S24", "S24_3LE", "S24_3BE" or "S32", but the device must have the capability. Except where stated using (*LE or *BE), endianness matches that of the processor.
alsa_output_format:
# Set to "yes" to disable synchronization. Default is "no".
alsa_disable_synchronization:
# Use this optional advanced setting to set the alsa period size near to this value
alsa_period_size:
# Use this optional advanced setting to set the alsa buffer size near to this value
alsa_buffer_size:
# Use this optional advanced setting to control whether MMAP-based output is used to communicate  with the DAC. Default is "yes"
alsa_use_mmap_if_available:
# Use this optional advanced setting to control whether the hardware in the DAC is used for muting. Default is "no", for compatibility with other audio players.
alsa_use_hardware_mute_if_available:
# Use this optional advanced setting to control how long to wait for data to be consumed by the output device before considering it an error. It should never approach 200 ms.
alsa_maximum_stall_time:
# Use this optional advanced setting to control how Shairport Sync gathers timing information. When set to "auto", if the output device is a real hardware device, precision timing will be used. Choose "no" for more compatible standard timing, choose "yes" to force the use of precision timing, which may cause problems.
alsa_use_precision_timing:
# This setting prevents the DAC from entering the standby mode. Some DACs make small "popping" noises when they go in and out of standby mode. Settings can be: "always", "auto" or "never". Default is "never", but only for backwards compatibility. The "auto" setting prevents entry to standby mode while Shairport Sync is in the "active" mode. You can use "yes" instead of "always" and "no" instead of "never".
alsa_disable_standby_mode:
# Use this optional advanced setting to control how little audio should remain in the output buffer before the disable_standby code should start sending silence to the output device.
alsa_disable_standby_mode_silence_threshold:
# Use this optional advanced setting to control how often the amount of audio remaining in the output buffer should be checked.
alsa_disable_standby_mode_silence_scan_interval:

## sndio - Parameters for the "sndio" audio back end. All are optional.
# optional setting to set the name of the output device. Default is the sndio system default.
sndio_device:
# optional setting  which can be 44100, 88200, 176400 or 352800, but the device must have the capability. Default is 44100.
sndio_rate:
# optional setting  which can be "U8", "S8", "S16", "S24", "S24_3LE", "S24_3BE" or "S32", but the device must have the capability. Except where stated using (*LE or *BE), endianness matches that of the processor.
sndio_format:
# advanced optional setting to set the period size near to this value
sndio_round:
# advanced optional setting to set the buffer size near to this value
sndio_bufsz:


## pa - Parameters for the "pa" PulseAudio  backend.
# For this section to be operative, Shairport Sync must be built with the following configuration flag:
# --with-pa
# Set this to override the default pulseaudio server that should be used.
pa_server:
# Set this to override the default pulseaudio sink that should be used. (Untested)
pa_sink:
# et this to the name that should appear in the Sounds "Applications" tab when Shairport Sync is active.
pa_application_name:

## jack - Parameters for the "jack" JACK Audio Connection Kit backend.
# For this section to be operative, Shairport Sync must be built with the following configuration flag:
# --with-jack
# Set this to the name of the client that should appear in "Connections" when Shairport Sync is active.
pa_client_name:
# Set this to a POSIX regular expression pattern that describes the ports you would like to connect to
#  automatically. Examples:
#   - "system:playback_[12]"
#   - "some_app_[0-9]*:in-[LR]"
#   - "jack_mixer:in_2[78]"
#  Beware: if you make a syntax error, libjack might crash. In that case, fix it and start over.
#  For a good overview, look here: https:#www.ibm.com/support/knowledgecenter/SS8NLW_11.0.1/com.ibm.swg.im.infosphere.dataexpl.engine.doc/c_posix-regex-examples.html
pa_autoconnect_pattern:
# Enable resampling by setting this to "very high", "high", "medium", "low" or "quick"
pa_soxr_resample_quality:
# advanced optional setting to set the buffer size to this value
pa_bufsz:

## pipe - Parameters for the "pipe" audio back end, a back end that directs raw CD-style audio output to a pipe. No interpolation is done.
# For this section to be operative, Shairport Sync must have been built with the following configuration flag:
# --with-pipe
pipe_name:

# There are no configuration file parameters for the "stdout" audio back end. No interpolation is done.
# To include support for the "stdout" backend, Shairport Sync must be built with the following configuration flag:
# --with-stdout

# There are no configuration file parameters for the "ao" audio back end. No interpolation is done.
# To include support for the "ao" backend, Shairport Sync must be built with the following configuration flag:
# --with-ao

## dsp - For this section to be operative, Shairport Sync must be built with the following configuration flag:
# --with-convolution
#####################
# This convolution filter can be used to apply almost any correction to the audio signal, like frequency and phase correction.
# For example you could measure (with a good microphone and a sweep-sine) the frequency response of your speakers + room,
# and apply a correction to get a flat response curve.
#####################
# Set this to "yes" to activate the convolution filter.
dsp_convolution:
# Impulse Response file to be convolved to the audio stream
dsp_convolution_ir_file:
# Static gain applied to prevent clipping during the convolution process
dsp_convolution_gain:
# Truncate the input file to this length in order to save CPU.
dsp_convolution_max_length:
#####################
# This loudness filter is used to compensate for human ear non linearity.
# When the volume decreases, our ears loose more sentisitivity in the low range frequencies than in the mid range ones.
# This filter aims at compensating for this loss, applying a variable gain to low frequencies depending on the volume.
# More info can be found here: https:#en.wikipedia.org/wiki/Equal-loudness_contour
# For this filter to work properly, you should disable (or set to a fix value) all other volume control and only let shairport-sync control your volume.
# The setting "loudness_reference_volume_db" should be set at the volume reported by shairport-sync when listening to music at a normal listening volume.
#####################
# Set this to "yes" to activate the loudness filter
dsp_loudness:
# Above this level the filter will have no effect anymore. Below this level it will gradually boost the low frequencies.
dsp_loudness_reference_volume_db:


# metadata - How to deal with metadata, including artwork
# For this section to be operative, Shairport Sync must be built with at one (or more) of the following configuration flags:
# --with-metadata, --with-dbus-interface, --with-mpris-interface or --with-mqtt-client.
# In those cases, "enabled" and "include_cover_art" will both be "yes" by default
# set this to yes to get Shairport Sync to solicit metadata from the source and to pass it on via a pipe
metadata_enabled:
# set to "yes" to get Shairport Sync to solicit cover art from the source and pass it via the pipe. You must also set "enabled" to "yes".
metadata_include_cover_art:
# artwork will be  stored in this directory if the dbus or MPRIS interfaces are enabled or if the MQTT client is in use. Set it to "" to prevent caching, which may be useful on some systems
metadata_cover_art_cache_directory:
metadata_pipe_name:
# wait for this number of milliseconds for a blocked pipe to unblock before giving up
metadata_pipe_timeout:
# if set to a host name or IP address, UDP packets containing metadata will be sent to this address. May be a multicast address. "socket-port" must be non-zero and "enabled" must be set to yes"
metadata_socket_address:
# if socket_address is set, the port to send UDP packets to
metadata_socket_port:
# the maximum packet size for any UDP metadata. This will be clipped to be between 500 or 65000. The default is 500.
metadata_socket_msglength:

# mqtt - How to enable the MQTT-metadata/remote-service
# For this section to be operative, Shairport Sync must be built with the following configuration flag:
# --with-mqtt-client
# set this to yes to enable the mqtt-metadata-service
mqtt_enabled:
# Hostname of the MQTT Broker
mqtt_hostname:
# Port on the MQTT Broker to connect to
mqtt_port:
#set this to a string to your username in order to enable username authentication
mqtt_username:
#set this to a string you your password in order to enable username & password authentication
mqtt_password:
#set this to the folder with the CA-Certificates to be accepted for the server certificate. If not set, TLS is not used
mqtt_capath:
#this may be used as an (exclusive) alternative to capath with a single file for all ca-certificates
mqtt_cafile:
#set this to a string to a user certificate to enable MQTT Client certificates. keyfile must also be set!
mqtt_certfile:
#private key for MQTT Client authentication
mqtt_keyfile:
#MQTT topic where this instance of shairport-sync should publish. If not set, the general.name value is used.
mqtt_topic:
#whether to publish all available metadata under the codes given in the 'metadata' docs.
mqtt_publish_raw:
# whether to publish a small (but useful) subset of metadata under human-understandable topics:
#  Currently published topics:artist,album,title,genre,format,songalbum,volume,client_ip,
#  Additionally, empty messages at the topics play_start,play_end,play_flush,play_resume are published
mqtt_publish_parsed:
#whether to publish the cover over mqtt in binary form. This may lead to a bit of load on the broker
mqtt_publish_cover:
# whether to remote control via MQTT. RC is available under `topic`/remote.
# Available commands are "command", "beginff", "beginrew", "mutetoggle", "nextitem", "previtem", "pause", "playpause", "play", "stop", "playresume", "shuffle_songs", "volumedown", "volumeup"
mqtt_enable_remote:


## diagnostics - Diagnostic settings. These are for diagnostic and debugging only. Normally you should leave them commented out
# set this to yes to stop Shairport Sync from requesting the retransmission of missing packets. Default is "no".
diagnostics_disable_resend_requests:
# set this to "syslog" (default), "stderr" or "stdout" or a file or pipe path to specify were all logs, statistics and diagnostic messages are written to. If there's anything wrong with the file spec, output will be to "stderr".
diagnostics_log_output_to:
# set to "yes" to print statistics in the log
diagnostics_statistics:
# "0" means no debug verbosity, "3" is most verbose.
diagnostics_log_verbosity:
# set this to yes if you want the file and line number of the message source in the log file
diagnostics_log_show_file_and_line:
# set this to yes if you want the time since startup in the debug message -- seconds down to nanoseconds
diagnostics_log_show_time_since_startup:
# set this to yes if you want the time since the last debug message in the debug message -- seconds down to nanoseconds
diagnostics_log_show_time_since_last_message:
# use this to simulate a noisy network where this fraction of UDP packets are lost in transmission. E.g. a value of 0.001 would mean an average of 0.1% of packets are lost, which is actually quite a high figure.
diagnostics_drop_this_fraction_of_audio_packets:
# artwork is deleted when its corresponding track has been played. Set this to "yes" to retain all artwork permanently. Warning -- your directory might fill up.
diagnostics_retain_cover_art:
